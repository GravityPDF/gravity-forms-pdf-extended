import { RequestLogger, Role, Selector, t } from 'testcafe';
import { admin, baseURL, editor } from '../auth';
import AdvancedCheck from '../utilities/page-model/helpers/advanced-check';
import Page from '../utilities/page-model/helpers/page';
import PageModel from '../models/Page';
import Pdf from '../utilities/page-model/helpers/pdf';
import { getQueryParam } from '../utilities/page-model/helpers/search-params';

let pdfId;
let downloadUrl;
const advancedCheck = new AdvancedCheck();
const page = new Page();
const pdf = new Pdf();
const downloadLogger = RequestLogger(downloadUrl, {
	logResponseBody: true,
	logResponseHeaders: true,
});

fixture`PDF Administrator & Non-Administrator - Restriction Test`;

test('should throw an error when a non-administrator user try to access a PDF generated by an admin', async (t) => {
	// Actions & Assertions
	await advancedCheck.navigateSection(
		'gf_edit_forms&view=settings&subview=PDF&id=4'
	);
	pdfId = await advancedCheck.shortcodeBox.getAttribute(
		'data-clipboard-text'
	);
	pdfId = pdfId.substring(30, 43);
	await t
		.useRole(editor)
		.navigateTo(`${baseURL}?gpdf=1&pid=${pdfId}&lid=4`)
		.expect(advancedCheck.pdfRestrictionErrorMessage.exists)
		.ok();
});

test("should redirect to WP login page if 'Restrict Owner' is enabled", async (t) => {
	// Actions
	// Toggle restrict owner checkbox
	await pdf.navigatePdf('4');
	// Navigate to pdf info
	await t.click(Selector('td.name').find('a').withText('Sample'));
	// check if it's publicly accessed then turn off
	if (!pdf.restrictOwnerCheckbox.visible) {
		await t.click(pdf.enablePublicAccessCheckbox);
	}
	await t.click(pdf.restrictOwnerCheckbox).click(pdf.saveSettings);

	// Create a new page
	await t
		.setNativeDialogHandler(() => true)
		.navigateTo(`${baseURL}/wp-admin/edit.php?post_type=page`);
	const name = 'Restrict Owner Enabled';
	const pageModel = new PageModel(name);
	await pageModel.add();
	await pageModel.insertBlock('shortcode', {
		target: '.block-editor-plain-text',
		content:
			'[gravityform id="4" title="false" description="false" ajax="true" tabindex="49"]',
	});
	await pageModel.saveChanges();
	await pageModel.publishChanges();

	// Visit the page as anon user
	pdfId = await getQueryParam('post');
	//
	await t
		.useRole(Role.anonymous())
		.navigateTo(`${baseURL}/?page_id=${pdfId}`)
		.typeText(advancedCheck.textInputField, 'texttest', { paste: true })
		.click(advancedCheck.submitButton)
		.useRole(admin);

	await pdf.navigate('gf_entries&id=4');
	downloadUrl = await advancedCheck.viewEntryLink.getAttribute('href');

	downloadLogger.clear();

	await t
		.addRequestHooks(downloadLogger)
		.useRole(Role.anonymous())
		.navigateTo(downloadUrl)
		.removeRequestHooks(downloadLogger);

	// Assertions
	await t
		.expect(
			downloadLogger.contains(
				(r) => r.response.headers['content-type'] === 'application/pdf'
			)
		)
		.notOk()
		.expect(advancedCheck.pdfRestrictionErrorMessage.exists)
		.notOk()
		.expect(advancedCheck.wpLoginForm.exists)
		.ok();

	// Cleanup
	await t.navigateTo(baseURL);
	await pageModel.delete();
});
