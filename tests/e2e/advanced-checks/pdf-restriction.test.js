import { RequestLogger, Role } from 'testcafe'
import { admin, baseURL, editor } from '../auth'
import AdvancedCheck from '../utilities/page-model/helpers/advanced-check'
import Page from '../utilities/page-model/helpers/page'
import Pdf from '../utilities/page-model/helpers/pdf'

let pdfId
let downloadUrl
const advancedCheck = new AdvancedCheck()
const page = new Page()
const pdf = new Pdf()
const downloadLogger = RequestLogger(downloadUrl, { logResponseBody: true, logResponseHeaders: true })

fixture`PDF Administrator & Non-Administrator - Restriction Test`

test('should throw an error when a non-administrator user try to access a PDF generated by an admin', async t => {
  // Actions & Assertions
  await advancedCheck.navigateSection('gf_edit_forms&view=settings&subview=PDF&id=4')
  pdfId = await advancedCheck.shortcodeBox.getAttribute('data-clipboard-text')
  pdfId = pdfId.substring(30, 43)
  await t
    .useRole(editor)
    .navigateTo(`${baseURL}/pdf/${pdfId}/4`)
    .expect(advancedCheck.pdfRestrictionErrorMessage.exists).ok()
})

test('should redirect to WP login page if \'Restrict Owner\' is enabled', async t => {
  // Actions & Assertions
  await advancedCheck.toggleRestrictOwnerCheckbox('gf_edit_forms&view=settings&subview=PDF&id=4')
  await page.navigatePage()
  await page.addNewPage()
  await page.navigatePage()
  await t
    .click(page.testPageLink)
    .click(page.addBlockIcon)
    .typeText(page.searchBlock.filterVisible(), 'shortcode', { paste: true })
    .click(page.shortcodeLink)
    .typeText(page.shortcodeTextarea, '[gravityform id=4 title=false description=false ajax=true tabindex=49]', { paste: true })
    .click(page.updateButton)
    .useRole(Role.anonymous())
    .navigateTo(`${baseURL}/test-page/`)
    .typeText(advancedCheck.textInputField, 'texttest', { paste: true })
    .click(advancedCheck.submitButton)
    .useRole(admin)

  await pdf.navigate('gf_entries&id=4')
  const downloadUrl = await advancedCheck.viewEntryLink.getAttribute('href')

  downloadLogger.clear()

  await t
    .addRequestHooks(downloadLogger)
    .useRole(Role.anonymous())
    .navigateTo(downloadUrl)
    .removeRequestHooks(downloadLogger)

  await t
    .expect(downloadLogger.contains(r => r.response.headers['content-type'] === 'application/pdf')).notOk()
    .expect(advancedCheck.pdfRestrictionErrorMessage.exists).notOk()
    .expect(advancedCheck.wpLoginForm.exists).ok()
})

test('reset/clean previous tests saved data and ensure PDF can be viewed by default', async t => {
  // Actions & Assertions
  await advancedCheck.toggleRestrictOwnerCheckbox('gf_edit_forms&view=settings&subview=PDF&id=4')
  await t.useRole(Role.anonymous())
    .navigateTo(`${baseURL}/test-page/`)
  await advancedCheck.submitNewPdfEntry()

  await t.useRole(admin)
  await pdf.navigate('gf_entries&id=4')

  downloadUrl = await advancedCheck.viewEntryLink.getAttribute('href')
  await page.deleteTestPage()
  await t.useRole(Role.anonymous())

  downloadLogger.clear()

  await t
    .addRequestHooks(downloadLogger)
    .navigateTo(downloadUrl)
    .wait(500)
    .removeRequestHooks(downloadLogger)

  // Assertions
  await t
    .expect(downloadLogger.contains(r => r.response.headers['content-type'] === 'application/pdf')).ok()
})
